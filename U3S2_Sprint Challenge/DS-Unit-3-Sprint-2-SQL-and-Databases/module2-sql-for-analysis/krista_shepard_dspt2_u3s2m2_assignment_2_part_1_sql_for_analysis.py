# -*- coding: utf-8 -*-
"""Krista Shepard DSPT2 U3S2M2 - Assignment 2 Part 1 - SQL for Analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_mGN9Emvi2edKEQwA7mFlVlqFhMG_klw

### Connecting to elephantsql through python
"""

# A package that allows us to pull from the elephant SQL website
! pip install psycopg2-binary

import psycopg2

dir(psycopg2)

help(psycopg2.connect)

# Pulled this info from the elephantsql website just copied and pasted
dbname = 'zvineetb'
user = 'zvineetb'
password = 'TODO' # Put top secret password here
host = 'raja.db.elephantsql.com'

conn = psycopg2.connect(dbname = dbname, user = user, password = password,
                        host = host)

del conn

# The postgres connection that connects to elephantsql
pg_conn = psycopg2.connect(dbname = dbname, user = user, password = password,
                        host = host)

# Created the cursor
pg_curs = pg_conn.cursor()

# Now you can execute commands from it
pg_curs.execute('SELECT * FROM test_table;')

# This lets us see the test_table we created in elephantsql
pg_curs.fetchall()

# Stepped aside from elephantsql and pulled the rpg db from github and used sqlite to look at it
!wget https://github.com/KryssyCo/DS-Unit-3-Sprint-2-SQL-and-Databases/blob/master/module1-introduction-to-sql/rpg_db.sqlite3?raw=true

# It was already in sqlite form.
!ls -alh

# renamed it
!mv 'rpg_db.sqlite3?raw=true' rpg_db.sqlite3

import sqlite3

# established connection
sl_conn = sqlite3.connect('rpg_db.sqlite3')

# created the cursor
sl_curs = sl_conn.cursor()

#Executed command from cursor
sl_curs.execute('SELECT COUNT (*) FROM charactercreator_character;').fetchall()

#Executed command from cursor
sl_curs.execute('SELECT COUNT (DISTINCT name) FROM charactercreator_character;').fetchall()

#Executed command from cursor
characters = sl_curs.execute('SELECT * FROM charactercreator_character;').fetchall()

# Looked at different rows
print(characters[1])
print(characters[2])
characters[0]

# Looked at the last row
characters[-1]

# Another way to get the length of the characters
len(characters)

# Used sqlite to get the schema for the table from rpg data base
sl_curs.execute('PRAGMA table_info(charactercreator_character);').fetchall()

# change types to move into postgres

create_character_table = """ 
CREATE TABLE charactercreator_character(
  character_id SERIAL PRIMARY KEY,
  name VARCHAR(30),
  level INT,
  exp INT,
  hp INT,
  strength INT,
  intelligence INT,
  dexterity INT,
  wisdom INT
);
"""

# Switched back to elephant sql
# This created an empty table in elephant sql called character_creator_character
pg_curs.execute(create_character_table)

# The next few steps show that the table is in elepphant sql now
show_tables = """
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname != 'pg_catalog'
AND schemaname != 'information_schema';
"""

pg_curs.execute(show_tables)

pg_curs.fetchall()

# Insert characters into the table
characters[0]

# Slice it and take off the id before we add it into the postgres
str(characters[0][1:])

# Prepping a single character to be moved to postgres
example_insert = """
INSERT INTO charactercreator_character
(name, level, exp, hp, strength, intelligence, dexterity, wisdom)
VALUES """ + str(characters[0][1:]) + ';'

print(example_insert)

# We want to insert all 302 characters from sqlite to elephantsql
# create a for loop
for character in characters:
  insert_character = """
    INSERT INTO charactercreator_character
    (name, level, exp, hp, strength, intelligence, dexterity, wisdom)
    VALUES """ + str(character[1:]) + ';'
    #print(insert_character)
  pg_curs.execute(insert_character)

pg_curs.execute('SELECT * FROM charactercreator_character;')

pg_curs.fetchall()

# Save the changes (close and commit)
pg_curs.close()
pg_conn.commit()

# Check that data in elephant sql matches whats in sqlite
pg_curs =pg_conn.cursor()
pg_curs.execute('SELECT * FROM charactercreator_character;')
pg_characters = pg_curs.fetchall()

# This just tests the first character
characters[0]

pg_characters[0]

# Check that all the characters are the same
for character, pg_character in zip(characters, pg_characters):
  assert character == pg_character