# -*- coding: utf-8 -*-
"""elephantsql_lecture.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cuKM-HmwboeLzWvuYZN-gyT3U_m4QNa_
"""

!pip install psycopg2-binary

import psycopg2

dbname = 'user' #same than user
user = 'user' #same than dbname
password = 'pass' #Don't commit this to github
host = 'host' #from SERVER type

pg_conn = psycopg2.connect(dbname=dbname, user=user, password=password, host=host)

pg_conn

pg_curs = pg_conn.cursor()

pg_curs.execute('SELECT * FROM test_table;')

#fetchall needs to be done in a separate cell
pg_curs.fetchall()

"""# charactercreator_character"""

!wget https://github.com/LambdaSchool/DS-Unit-3-Sprint-2-SQL-and-Databases/blob/master/module1-introduction-to-sql/rpg_db.sqlite3?raw=true

!ls -alh

!mv 'rpg_db.sqlite3?raw=true' rpg_db.sqlite3

import sqlite3

sl_conn = sqlite3.connect('rpg_db.sqlite3')

sl_curs = sl_conn.cursor()

sl_curs.execute('SELECT COUNT(*) FROM charactercreator_character').fetchall()

sl_curs.execute('SELECT COUNT(DISTINCT name) FROM charactercreator_character').fetchall()

characters = sl_curs.execute('SELECT * FROM charactercreator_character;').fetchall()

characters

len(characters)

characters[-1]

characters[0]

sl_curs.execute('PRAGMA table_info(charactercreator_character);').fetchall()

create_character_table = """
  CREATE TABLE charactercreator_character (
    character_id SERIAL PRIMARY KEY,
    name VARCHAR(30),
    level INT,
    exp INT,
    hp INT,
    strength INT,
    intelligence INT,
    dexterity INT,
    wisdom INT
  );
  """

pg_curs.execute(create_character_table)

show_tables = """
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname != 'pg_catalog'
AND schemaname != 'information_schema';
"""

pg_curs.execute(show_tables)

pg_curs.fetchall()

str(characters[0][1:])

example_insert = """
INSERT INTO charactercreator_character
(name, level, exp, hp, strength, intelligence,dexterity, wisdom)
VALUES """ + str(characters[0][1:]) + ';'

print(example_insert)

for character in characters:
  insert_character = """
    INSERT INTO charactercreator_character
    (name, level, exp, hp, strength, intelligence,dexterity, wisdom)
    VALUES """ + str(character[1:]) + ';'
  # print(insert_character)
  pg_curs.execute(insert_character)

insert_character

pg_curs.execute ('SELECT * FROM charactercreator_character;')
pg_curs.fetchall()

pg_curs.close()
pg_conn.commit()

pg_curs = pg_conn.cursor()
pg_curs.execute('SELECT * FROM charactercreator_character;')
pg_characters = pg_curs.fetchall()

characters[0]

pg_characters[0]

for character, pg_character in zip(characters, pg_characters):
    assert character == pg_character

pg_curs.close()
pg_conn.commit()

"""# armory_item"""

sl_curs.execute('SELECT COUNT(*) FROM armory_item').fetchall()

items = sl_curs.execute('SELECT * FROM armory_item;').fetchall()

items

sl_curs.execute('PRAGMA table_info(armory_item);').fetchall()

create_item_table = """
  CREATE TABLE armory_item (
    item_id SERIAL PRIMARY KEY,
    name VARCHAR(30),
    value INT,
    weight INT
  );
  """

pg_conn = psycopg2.connect(dbname=dbname, user=user, password=password, host=host)

pg_conn

pg_curs = pg_conn.cursor()

pg_curs.execute(create_item_table)

show_tables = """
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname != 'pg_catalog'
AND schemaname != 'information_schema';
"""

pg_curs.execute(show_tables)

pg_curs.fetchall()

item_insert = """
INSERT INTO armory_item
(name, value, weight)
VALUES """ + str(items[0][1:]) + ';'

print(item_insert)

for item in items:
  insert_item = """
    INSERT INTO armory_item
    (name, value, weight)
    VALUES """ + str(item[1:]) + ';'
  pg_curs4.execute(insert_item)

items

insert_item

pg_curs.execute ('SELECT * FROM armory_item;')
pg_curs.fetchall()

pg_curs.close()
pg_conn.commit()

pg_curs = pg_conn.cursor()
pg_curs.execute('SELECT * FROM armory_item;')
pg_items = pg_curs.fetchall()

items[0]

pg_items[0]

for item, pg_item in zip(items, pg_items):
    assert item == pg_item

pg_curs.close()
pg_conn.commit()

"""# armory_weapon"""

sl_curs.execute('SELECT COUNT(*) FROM armory_weapon').fetchall()

weapons = sl_curs.execute('SELECT * FROM armory_weapon;').fetchall()

weapons

sl_curs.execute('PRAGMA table_info(armory_weapon);').fetchall()

create_weapons_table = """
  CREATE TABLE armory_weapon(
    item_ptr_id INT NOT NULL,
    power INT NOT NULL,
    FOREIGN KEY(item_ptr_id) REFERENCES armory_item(item_id),
	  PRIMARY KEY(item_ptr_id)
  );
  """

pg_conn = psycopg2.connect(dbname=dbname, user=user, password=password, host=host)
pg_conn
pg_curs = pg_conn.cursor()

pg_curs.execute(create_weapons_table)

show_tables = """
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname != 'pg_catalog'
AND schemaname != 'information_schema';
"""

pg_curs.execute(show_tables)
pg_curs.fetchall()

weapon_insert = """
INSERT INTO armory_weapon
(item_ptr_id, power)
VALUES """ + str(weapons[0]) + ';'

print(weapon_insert)

weapons[0][0:]

for weapon in weapons:
  insert_weapon = """
    INSERT INTO armory_weapon
    (item_ptr_id, power)
    VALUES """ + str(weapon[0:]) + ';'
  pg_curs.execute(insert_weapon)

insert_weapon

pg_curs.execute ('SELECT * FROM armory_weapon;')
pg_curs.fetchall()

pg_curs.close()
pg_conn.commit()

pg_curs = pg_conn.cursor()
pg_curs.execute('SELECT * FROM armory_weapon;')
pg_weapons = pg_curs.fetchall()

weapons[0]

pg_weapons[0]

for weapon, pg_weapon in zip(weapon, pg_weapon):
    assert weapon == pg_weapon

pg_curs.close()
pg_conn.commit()

"""# charactercreator_character_inventory"""

sl_curs.execute('SELECT COUNT(*) FROM charactercreator_character_inventory').fetchall()

ids = sl_curs.execute('SELECT * FROM charactercreator_character_inventory;').fetchall()

ids

sl_curs.execute('PRAGMA table_info(charactercreator_character_inventory);').fetchall()

create_ids_table = """
  CREATE TABLE charactercreator_character_inventory (
	id	SERIAL PRIMARY KEY,
	character_id	INT NOT NULL,
	item_id	INT NOT NULL,
	FOREIGN KEY(character_id) REFERENCES charactercreator_character(character_id),
	FOREIGN KEY(item_id) REFERENCES armory_item(item_id)
);
  """

pg_conn = psycopg2.connect(dbname=dbname, user=user, password=password, host=host)
pg_conn
pg_curs = pg_conn.cursor()

pg_curs.execute(create_ids_table)

show_tables = """
SELECT *
FROM pg_catalog.pg_tables
WHERE schemaname != 'pg_catalog'
AND schemaname != 'information_schema';
"""

pg_curs.execute(show_tables)
pg_curs.fetchall()

id_insert = """
INSERT INTO charactercreator_character_inventory
(character_id, item_id)
VALUES """ + str(ids[0][1:]) + ';'

print(id_insert)

ids[0][1:]

for id in ids:
  insert_id = """
    INSERT INTO charactercreator_character_inventory
    (character_id, item_id)
    VALUES """ + str(ids[1:]) + ';'
  pg_curs.execute(insert_id)

insert_id

pg_curs.execute ('SELECT * FROM charactercreator_character_inventory;')
pg_curs.fetchall()

pg_curs.close()
pg_conn.commit()

pg_curs = pg_conn.cursor()
pg_curs.execute('SELECT * FROM charactercreator_character_inventory;')
pg_ids = pg_curs.fetchall()

ids[0]

pg_ids[0]

for identification, pg_identification in zip(identification, pg_identification):
    assert identification == pg_identification

pg_curs.close()
pg_conn.commit()
